version: '3.8'

services:
  nginx:
    container_name: ${PREFIX}-nginx
    image: nginx:${TAG_NGINX}
    networks:
      - webnet
    ports:
      - ${PORT}:8080
    restart: ${RESTART}
    volumes:
      - type: bind
        source: ./docker/config/nginx.conf
        target: /etc/nginx/conf.d/config.conf
        read_only: true
      - type: bind
        source: ./docker/config/.htpasswd
        target: /etc/nginx/conf.d/.htpasswd
        read_only: true

  dozzle:
    container_name: ${PREFIX}-dozzle
    depends_on:
      - nginx
    image: amir20/dozzle:${TAG_DOZZLE}
    networks:
      - webnet
    ports:
      - ${PORT_DOZZLE}:8080
    restart: ${RESTART}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    command: ['postgres', '-c', 'log_statement=all']
    container_name: ${PREFIX}-postgres
    environment:
      TZ: ${TZ}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_BASENAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    image: postgres:${TAG_POSTGRES}
    networks:
      - webnet
    restart: ${RESTART}
    volumes:
      - postgres:/var/lib/postgresql/data

  adminer:
    container_name: ${PREFIX}-adminer
    depends_on:
      - postgres
      - nginx
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    image: adminer:${TAG_ADMINER}
    networks:
      - webnet
    ports:
      - ${PORT_ADMINER}:8080
    restart: ${RESTART}

  nest:
    build:
      args:
        tag: ${TAG_NODE}
      context: .
      target: ${NODE_ENV}
    command: sh run.sh
    container_name: ${PREFIX}-nest
    depends_on:
      - postgres
      - nginx
    env_file:
      - .env
    networks:
      - webnet
    ports:
      - 9229:9229
    restart: ${RESTART}
    user: ${UID}:${GID}
    volumes:
      - .:/home/node/app
      - /home/node/app/node_modules
      - /home/node/app/dist

volumes:
  postgres:
    name: ${PREFIX}-postgres
    driver: local
    external: false

networks:
  webnet:
    name: ${PREFIX}-server
    driver: bridge
